import openai
import time

def GPTCoding(prompt, memory = [], GPT_model = "gpt-3.5-turbo", api_key = None, organization_id = None, temperature = 0, time_interval = 20):
    """Generate codes using GPT.
    This function utilizes GPT to generate Python codes according to given prompts.
    
    Inputs
    ----------
    prompt: Prompt generated by prompting functions.
    memory: Previous chats between users and GPT.
    GPT_model: Name of the GPT model.
    api_key: Your API key of GPT.
    organization_id: Your organization id of GPT.
    temperature: Control the creativity of the responses generated by GPT. Higher values result in more randomness, while lower values make responses more focused and deterministic.
    time_interval: Minimum time interval between two calls of the GPT API (s).
    
    Outputs
    ----------
    result: Outputs of GPT-based automated model deployment. There are 5 outputs in the results:
      code: Code offered by GPT.
      response_time: Response time of GPT (s).
      completion_tokens: Completion tokens of GPT.
      prompt_tokens: Prompt tokens of GPT.
      message: Chat between GPT and users.
    
    """
    
    openai.api_key = api_key
    message = memory
    message.append({"role": "user", "content": prompt})
    
    try:  #GPT responses successfully (returncode = 0).
        if organization_id == None:
            time_start = time.time()
            chat_completion = openai.ChatCompletion.create(model = GPT_model,
                                                           messages = message, 
                                                           temperature = temperature)
            time_end = time.time()
            
        else:
            time_start = time.time()
            chat_completion = openai.ChatCompletion.create(model = GPT_model,
                                                           organization = organization_id,
                                                           messages = message, 
                                                           temperature = temperature) 
            time_end = time.time()
            
        response = chat_completion.choices[0].message.content
        message.append({"role": "assistant", "content": response})
        
        completion_tokens = chat_completion.usage.completion_tokens
        prompt_tokens = chat_completion.usage.prompt_tokens
        response_time = time_end-time_start
        
        if "```python" in response:
            code = response.split("```python")[1].split("```")[0]
            
        else:
            code = response
            
        if response_time <= time_interval:
            time.sleep(time_interval-response_time)
        
        output = {"code":code,
                  "response_time": response_time,
                  "completion_tokens": completion_tokens,
                  "prompt_tokens": prompt_tokens,
                  "message": message}
        
        return 0, output
    
    except: #GPT cannot response (returncode = 1).
        time.sleep(time_interval)
        
        message.append({"role": "assistant", "content": None})
        
        output = {"code":None,
                  "response_time": None,
                  "completion_tokens": None,
                  "prompt_tokens": None,
                  "message": message}
        
        return 1, output
