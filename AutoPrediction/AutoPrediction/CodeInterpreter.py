import subprocess
import pickle
import time
import os

def CodeInterpreter(Code_text, language = "python", Code_file = "TestCode.py"):
    """Code interpreter for model-training Python codes.
    This function can run model-training Python codes and get results.
    
    Inputs
    ----------
    Code_text: Python code text generated by GPT
    language: Type of programming language. The default is "python".
    Code_file: Name of the code file.

    Outputs
    ----------
    result: Outputs of the code interpreter. There are 3 outputs in the results:
      model_accuracy: Model accuracy.
      run_time_code: Code run time (s).
      error_message: Error messages of the code..
    
    """
    
    try:
        with open(Code_file, 'w', encoding="utf-8") as f:
            save_data = '''\n\nimport pickle\nf_save = open('model_accuracy.pkl', 'wb')\npickle.dump(model_accuracy, f_save)\nf_save.close()'''
            Code_text = Code_text+save_data
            f.write(Code_text)
        
        time_start = time.time()
        f = subprocess.Popen([language, Code_file], text=True, stderr=subprocess.PIPE, close_fds = True)
        _ , error_message = f.communicate(input=None)
        returncode = f.returncode
        f.terminate()
        time_end = time.time()
        run_time_code = time_end-time_start
        os.remove(Code_file)
        
        if returncode == 0: #The code runs successfully (returncode = 0).
            f_read = open("model_accuracy.pkl", 'rb')
            model_accuracy = pickle.load(f_read)
            f_read.close()
            os.remove("model_accuracy.pkl")
            
            result = {"model_accuracy": model_accuracy,
                      "run_time_code": run_time_code,
                      "error_message": None}
            
            return 0, result
        
        else: #The code cannot run successfully (returncode = 1).
            result = {"model_accuracy": None,
                      "run_time_code": run_time_code,
                      "error_message": error_message}
            
            return 1, result
        
    except: #The code interpreter breaks down (returncode = 2).
        result = {"model_accuracy": None,
                  "run_time_code": None,
                  "error_message": None}
        
        return 2, result

def CodeInterpreterModelDeployment(Code_text, language = "python", Code_file = "TestCode.py"):
    """Code interpreter for model-deployment Python codes.
    This function can run model-deployment Python codes and get results.
    
    Inputs
    ----------
    Code_text: Python code text generated by GPT
    language: Type of programming language. The default is "python".
    Code_file: Name of the code file.

    Outputs
    ----------
    result: Outputs of the code interpreter. There are 3 outputs in the results:
      predicted_load: Real-time prediction results.
      run_time_code: Code run time (s).
      error_message: Error messages of the code..
    
    """
    
    try:
        with open(Code_file, 'w', encoding="utf-8") as f:
            save_data = '''\n\nimport pickle\nf_save = open('predicted_load.pkl', 'wb')\npickle.dump(predicted_load, f_save)\nf_save.close()'''
            Code_text = Code_text+save_data
            f.write(Code_text)
        
        time_start = time.time()
        f = subprocess.Popen([language, Code_file], text=True, stderr=subprocess.PIPE, close_fds = True)
        _ , error_message = f.communicate(input=None)
        returncode = f.returncode
        f.terminate()
        time_end = time.time()
        run_time_code = time_end-time_start
        os.remove(Code_file)
        
        if returncode == 0: #The code runs successfully (returncode = 0).
            f_read = open("predicted_load.pkl", 'rb')
            predicted_load = pickle.load(f_read)
            f_read.close()
            os.remove("predicted_load.pkl")
            
            result = {"predicted_load": predicted_load,
                      "run_time_code": run_time_code,
                      "error_message": None}
            
            return 0, result
        
        else: #The code cannot run successfully (returncode = 1).
            result = {"predicted_load": None,
                      "run_time_code": run_time_code,
                      "error_message": error_message}
            
            return 1, result
        
    except: #The code interpreter breaks down (returncode = 2).
        result = {"predicted_load": None,
                  "run_time_code": None,
                  "error_message": None}
        
        return 2, result